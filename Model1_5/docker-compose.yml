version: '3.8'

services:
  # Main Ocean Hazard Analysis API
  hazard-api:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY:-}
    volumes:
      # Optional: Mount logs directory
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - hazard-network

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - hazard-api
    restart: unless-stopped
    networks:
      - hazard-network
    profiles:
      - production

  # Optional: Redis for caching (future enhancement)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - hazard-network
    profiles:
      - cache

  # Optional: PostgreSQL for data storage (future enhancement)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=hazard_db
      - POSTGRES_USER=hazard_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-hazard_password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - hazard-network
    profiles:
      - database

volumes:
  redis-data:
  postgres-data:

networks:
  hazard-network:
    driver: bridge