version: '3.8'

services:
  # Ocean Hazard Prediction API
  ocean-hazard-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ocean-hazard-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - MONGODB_URI=mongodb://mongo:27017/ocean_hazard_db
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - mongo
      - redis
    networks:
      - ocean-hazard-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Development version (commented out by default)
  # ocean-hazard-dev:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #     target: development
  #   container_name: ocean-hazard-dev
  #   ports:
  #     - "8001:8000"
  #   environment:
  #     - ENVIRONMENT=development
  #     - LOG_LEVEL=DEBUG
  #     - API_HOST=0.0.0.0
  #     - API_PORT=8000
  #     - MONGODB_URI=mongodb://mongo:27017/ocean_hazard_dev_db
  #     - REDIS_URL=redis://redis:6379/1
  #   volumes:
  #     - .:/app
  #     - ./logs:/app/logs
  #     - ./data:/app/data
  #   depends_on:
  #     - mongo
  #     - redis
  #   networks:
  #     - ocean-hazard-network
  #   restart: unless-stopped

  # MongoDB Database
  mongo:
    image: mongo:5.0
    container_name: ocean-hazard-mongo
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD:-change_this_password}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE:-ocean_hazard_db}
    volumes:
      - mongo_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - ocean-hazard-network
    restart: unless-stopped

  # Redis for caching and background tasks
  redis:
    image: redis:7-alpine
    container_name: ocean-hazard-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-change_this_password}
    volumes:
      - redis_data:/data
    networks:
      - ocean-hazard-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: ocean-hazard-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - ocean-hazard-api
    networks:
      - ocean-hazard-network
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus
    container_name: ocean-hazard-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ocean-hazard-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana
    container_name: ocean-hazard-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-change_this_password}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - ocean-hazard-network
    restart: unless-stopped

  # Jupyter notebook for data analysis
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: ocean-hazard-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=${JUPYTER_TOKEN:-change_this_token}
    volumes:
      - .:/app
      - ./notebooks:/app/notebooks
      - ./data:/app/data
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root", "--NotebookApp.token='${JUPYTER_TOKEN:-change_this_token}'"]
    depends_on:
      - mongo
      - redis
    networks:
      - ocean-hazard-network
    restart: unless-stopped

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ocean-hazard-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16