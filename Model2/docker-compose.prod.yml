version: '3.8'

services:
  # Production Disaster Management API
  disaster-api:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - PYTHONPATH=/app
      - APP_ENV=production
      - LOG_LEVEL=INFO
      - API_HOST=0.0.0.0
      - API_PORT=8000
    volumes:
      - logs:/app/logs
      - model-cache:/app/models/.cache
      - ./hazard_history.json:/app/hazard_history.json
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - disaster-network
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3

  # Production Nginx Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - logs:/var/log/nginx
    depends_on:
      - disaster-api
    restart: unless-stopped
    networks:
      - disaster-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Redis for Caching (Production Enhancement)
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - disaster-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # PostgreSQL for Data Persistence (Optional)
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: disaster_mgmt
      POSTGRES_USER: disaster_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - disaster-network
    profiles:
      - database
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - disaster-network
    profiles:
      - monitoring

volumes:
  logs:
    driver: local
  model-cache:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local

networks:
  disaster-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16